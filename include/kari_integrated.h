// Generated by gencpp from file kari_estimator/kari_integrated.msg
// DO NOT EDIT!


#ifndef KARI_ESTIMATOR_MESSAGE_KARI_INTEGRATED_H
#define KARI_ESTIMATOR_MESSAGE_KARI_INTEGRATED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kari_estimator
{
template <class ContainerAllocator>
struct kari_integrated_
{
  typedef kari_integrated_<ContainerAllocator> Type;

  kari_integrated_()
    : imu_aa(0)
    , imu_bb(0.0)
    , altimeter_aa(0)
    , altimeter_bb(0.0)
    , optical_aa(0)
    , optical_bb(0.0)  {
    }
  kari_integrated_(const ContainerAllocator& _alloc)
    : imu_aa(0)
    , imu_bb(0.0)
    , altimeter_aa(0)
    , altimeter_bb(0.0)
    , optical_aa(0)
    , optical_bb(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _imu_aa_type;
  _imu_aa_type imu_aa;

   typedef float _imu_bb_type;
  _imu_bb_type imu_bb;

   typedef uint32_t _altimeter_aa_type;
  _altimeter_aa_type altimeter_aa;

   typedef float _altimeter_bb_type;
  _altimeter_bb_type altimeter_bb;

   typedef uint32_t _optical_aa_type;
  _optical_aa_type optical_aa;

   typedef float _optical_bb_type;
  _optical_bb_type optical_bb;





  typedef boost::shared_ptr< ::kari_estimator::kari_integrated_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kari_estimator::kari_integrated_<ContainerAllocator> const> ConstPtr;

}; // struct kari_integrated_

typedef ::kari_estimator::kari_integrated_<std::allocator<void> > kari_integrated;

typedef boost::shared_ptr< ::kari_estimator::kari_integrated > kari_integratedPtr;
typedef boost::shared_ptr< ::kari_estimator::kari_integrated const> kari_integratedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kari_estimator::kari_integrated_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kari_estimator::kari_integrated_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kari_estimator::kari_integrated_<ContainerAllocator1> & lhs, const ::kari_estimator::kari_integrated_<ContainerAllocator2> & rhs)
{
  return lhs.imu_aa == rhs.imu_aa &&
    lhs.imu_bb == rhs.imu_bb &&
    lhs.altimeter_aa == rhs.altimeter_aa &&
    lhs.altimeter_bb == rhs.altimeter_bb &&
    lhs.optical_aa == rhs.optical_aa &&
    lhs.optical_bb == rhs.optical_bb;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kari_estimator::kari_integrated_<ContainerAllocator1> & lhs, const ::kari_estimator::kari_integrated_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kari_estimator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kari_estimator::kari_integrated_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kari_estimator::kari_integrated_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_estimator::kari_integrated_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_estimator::kari_integrated_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_estimator::kari_integrated_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_estimator::kari_integrated_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kari_estimator::kari_integrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36a844b9116e52ef6e531904cedbf9e6";
  }

  static const char* value(const ::kari_estimator::kari_integrated_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36a844b9116e52efULL;
  static const uint64_t static_value2 = 0x6e531904cedbf9e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::kari_estimator::kari_integrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kari_estimator/kari_integrated";
  }

  static const char* value(const ::kari_estimator::kari_integrated_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kari_estimator::kari_integrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 imu_aa\n"
"float32 imu_bb\n"
"\n"
"uint32 altimeter_aa\n"
"float32 altimeter_bb\n"
"\n"
"uint32 optical_aa\n"
"float32 optical_bb\n"
;
  }

  static const char* value(const ::kari_estimator::kari_integrated_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kari_estimator::kari_integrated_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imu_aa);
      stream.next(m.imu_bb);
      stream.next(m.altimeter_aa);
      stream.next(m.altimeter_bb);
      stream.next(m.optical_aa);
      stream.next(m.optical_bb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kari_integrated_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kari_estimator::kari_integrated_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kari_estimator::kari_integrated_<ContainerAllocator>& v)
  {
    s << indent << "imu_aa: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.imu_aa);
    s << indent << "imu_bb: ";
    Printer<float>::stream(s, indent + "  ", v.imu_bb);
    s << indent << "altimeter_aa: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.altimeter_aa);
    s << indent << "altimeter_bb: ";
    Printer<float>::stream(s, indent + "  ", v.altimeter_bb);
    s << indent << "optical_aa: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.optical_aa);
    s << indent << "optical_bb: ";
    Printer<float>::stream(s, indent + "  ", v.optical_bb);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARI_ESTIMATOR_MESSAGE_KARI_INTEGRATED_H
